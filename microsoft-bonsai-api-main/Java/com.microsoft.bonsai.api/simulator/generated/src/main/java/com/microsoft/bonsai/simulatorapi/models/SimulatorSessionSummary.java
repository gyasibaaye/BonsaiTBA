/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.bonsai.simulatorapi.models;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * A summary of a SimulatorSession, returned from ListSessions.
 */
public class SimulatorSessionSummary {
    /**
     * The sessionId property.
     */
    @JsonProperty(value = "sessionId")
    private String sessionId;

    /**
     * Possible values include: 'Deregistered', 'Attachable', 'Attached',
     * 'Detaching', 'Rejected'.
     */
    @JsonProperty(value = "sessionStatus")
    private SimulatorSessionTypesStatus sessionStatus;

    /**
     * From the registration's SimulatorInterface.
     */
    @JsonProperty(value = "simulatorName")
    private String simulatorName;

    /**
     * The simulatorContext property.
     */
    @JsonProperty(value = "simulatorContext")
    private SimulatorContext simulatorContext;

    /**
     * Get the sessionId value.
     *
     * @return the sessionId value
     */
    public String sessionId() {
        return this.sessionId;
    }

    /**
     * Set the sessionId value.
     *
     * @param sessionId the sessionId value to set
     * @return the SimulatorSessionSummary object itself.
     */
    public SimulatorSessionSummary withSessionId(String sessionId) {
        this.sessionId = sessionId;
        return this;
    }

    /**
     * Get possible values include: 'Deregistered', 'Attachable', 'Attached', 'Detaching', 'Rejected'.
     *
     * @return the sessionStatus value
     */
    public SimulatorSessionTypesStatus sessionStatus() {
        return this.sessionStatus;
    }

    /**
     * Set possible values include: 'Deregistered', 'Attachable', 'Attached', 'Detaching', 'Rejected'.
     *
     * @param sessionStatus the sessionStatus value to set
     * @return the SimulatorSessionSummary object itself.
     */
    public SimulatorSessionSummary withSessionStatus(SimulatorSessionTypesStatus sessionStatus) {
        this.sessionStatus = sessionStatus;
        return this;
    }

    /**
     * Get from the registration's SimulatorInterface.
     *
     * @return the simulatorName value
     */
    public String simulatorName() {
        return this.simulatorName;
    }

    /**
     * Set from the registration's SimulatorInterface.
     *
     * @param simulatorName the simulatorName value to set
     * @return the SimulatorSessionSummary object itself.
     */
    public SimulatorSessionSummary withSimulatorName(String simulatorName) {
        this.simulatorName = simulatorName;
        return this;
    }

    /**
     * Get the simulatorContext value.
     *
     * @return the simulatorContext value
     */
    public SimulatorContext simulatorContext() {
        return this.simulatorContext;
    }

    /**
     * Set the simulatorContext value.
     *
     * @param simulatorContext the simulatorContext value to set
     * @return the SimulatorSessionSummary object itself.
     */
    public SimulatorSessionSummary withSimulatorContext(SimulatorContext simulatorContext) {
        this.simulatorContext = simulatorContext;
        return this;
    }

}
