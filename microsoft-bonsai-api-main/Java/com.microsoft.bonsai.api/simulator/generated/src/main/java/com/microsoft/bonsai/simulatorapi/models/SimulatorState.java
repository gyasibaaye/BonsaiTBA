/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.bonsai.simulatorapi.models;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * It contains simulator state information needed by bonsai platform in
 * response of an action.
 */
public class SimulatorState {
    /**
     * Always startes with 1, and Bonsai platform increment it at each Step
     * event in advance operation.static
     * Always just return the sequenceId returned by previous advance operation
     * response.
     */
    @JsonProperty(value = "sequenceId", required = true)
    private int sequenceId;

    /**
     * State of your simulator model.
     */
    @JsonProperty(value = "state")
    private Object state;

    /**
     * Optional halt parameter to indicate, simulator wants to halt.
     * Implicitly false when not present.
     */
    @JsonProperty(value = "halted")
    private Boolean halted;

    /**
     * No error if not defined or empty.
     */
    @JsonProperty(value = "error")
    private String error;

    /**
     * Get always startes with 1, and Bonsai platform increment it at each Step event in advance operation.static
     Always just return the sequenceId returned by previous advance operation response.
     *
     * @return the sequenceId value
     */
    public int sequenceId() {
        return this.sequenceId;
    }

    /**
     * Set always startes with 1, and Bonsai platform increment it at each Step event in advance operation.static
     Always just return the sequenceId returned by previous advance operation response.
     *
     * @param sequenceId the sequenceId value to set
     * @return the SimulatorState object itself.
     */
    public SimulatorState withSequenceId(int sequenceId) {
        this.sequenceId = sequenceId;
        return this;
    }

    /**
     * Get state of your simulator model.
     *
     * @return the state value
     */
    public Object state() {
        return this.state;
    }

    /**
     * Set state of your simulator model.
     *
     * @param state the state value to set
     * @return the SimulatorState object itself.
     */
    public SimulatorState withState(Object state) {
        this.state = state;
        return this;
    }

    /**
     * Get optional halt parameter to indicate, simulator wants to halt.
     Implicitly false when not present.
     *
     * @return the halted value
     */
    public Boolean halted() {
        return this.halted;
    }

    /**
     * Set optional halt parameter to indicate, simulator wants to halt.
     Implicitly false when not present.
     *
     * @param halted the halted value to set
     * @return the SimulatorState object itself.
     */
    public SimulatorState withHalted(Boolean halted) {
        this.halted = halted;
        return this;
    }

    /**
     * Get no error if not defined or empty.
     *
     * @return the error value
     */
    public String error() {
        return this.error;
    }

    /**
     * Set no error if not defined or empty.
     *
     * @param error the error value to set
     * @return the SimulatorState object itself.
     */
    public SimulatorState withError(String error) {
        this.error = error;
        return this;
    }

}
